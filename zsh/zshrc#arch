ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

export XDG_DATA_HOME=$HOME/.local/share
export XDG_CONFIG_HOME=$HOME/.config
export XDG_STATE_HOME=$HOME/.local/state
export XDG_CACHE_HOME=$HOME/.cache

# history 
HISTFILE="$HOME/.config/zsh/zsh_histoy"
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.
## custom bind key
bindkey '^[[3~' delete-char
bindkey '^B' backward-word
bindkey '^F' forward-word

#
# Path to your oh-my-zsh installation.
#
source /home/akawcc/RSFSRC/env.sh
export PATH=$RSFSRC/user/cumtb/build:~/CWP/44R26/bin:$HOME/.local/bin:$PATH
export DATAPATH=./datarsf/
export VISUAL=nvim
export EDITOR=nvim

export CWPROOT=/home/akawcc/CWP
export DEBUGINFOD_URLS="https://debuginfod.archlinux.org/"
# export CBLASROOT=/home/akawcc/temp/lapack-3.10.1/CBLAS/include/
# export LIBRARY_PATH=$LIBRARY_PATH:/home/akawcc/temp/lapack-3.10.1:/home/atmosu/RSFROOT/
# export C_INCLUDE_PATH=$C_INCLUDE_PATH:/home/akawcc/temp/lapack-3.10.1/LAPACKE/include:/home/atmosu/temp/lapack-3.10.1/CBLAS/include:/home/atmosu/RSFROOT/include
# export CPLUS_INCLUDE_PATH=$C_INCLUDE_PATH

# source ~/.config/fzf.zsh

export fzf_preview_cmd='[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (cat --color=always {} || highlight -O ansi -l {} || cat {}) 2> /dev/null | head -500'
export FZF_COMPLETION_TRIGGER='\'
# export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --delimiter='='"


# Add wisely, as too many plugins slow down shell startup.
# zinit light zsh-users/zsh-syntax-highlighting

zinit light zdharma-continuum/fast-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions

zinit ice depth=1
# zinit light jeffreytse/zsh-vi-mode

ZSH_AUTOSUGGEST_STRATEGY=(history completion)

#------------theme
# zinit snippet OMZL::git.zsh
# source $XDG_CONFIG_HOME/zsh/lukerandall-theme.zsh

source $XDG_CONFIG_HOME/zsh/customgitinfo.zsh

######################### oh my zsh style
# ZSH_THEME="lukerandall"
# ## Zinit Setting
# # Must Load OMZ Git library
# zi snippet OMZL::git.zsh
# # Load Git plugin from OMZ
# zi snippet OMZP::git
# zi cdclear -q # <- forget completions provided up to this moment
# setopt promptsubst
# # Load Prompt
# zi snippet OMZT::lukerandall
# #-------------------------theme

# plugins=(
#   git
#   zsh-syntax-highlighting
#   zsh-autosuggestions
# )

#source $ZSH/oh-my-zsh.sh

# User configuration
alias vim='nvim'
alias ran='ranger --choosedir=$XDG_CACHE_HOME/.rangerdir; cd `cat $XDG_CACHE_HOME/.rangerdir`'
alias ra='yazi "$@" --cwd-file=$XDG_CACHE_HOME/.rangerdir; cd `cat  $XDG_CACHE_HOME/.rangerdir`'


# alias oh='/mnt/c/Windows/explorer.exe .' 
if [[ $(eval "uname -a") =~ "WSL2" ]];then
  # echo fomer  contain $wsl2"
  alias oh='/mnt/c/Windows/explorer.exe .' 
fi
alias zz='z -' 
alias lg='lazygit' 
alias ls='ls --color' 
alias la='ls -alh'
alias hv='/mnt/c/applicationc/Honeyview/Honeyview.exe'
# alias hh='cd ..'
# alias refresh-tmux="eval \$(tmux showenv -s | grep -E '^(SSH|DISPLAY)')"

autoload -Uz compinit
compinit
function _csvshow(){
  if [ $# -eq 0 ]; then
    column -s, -t | less -#2 -N -S 
  else
    column -s, -t < $1 | less -#2 -N -S 
  fi
}

alias csvshow='_csvshow'
# -----------------auto suggestions-

(( ! ${+ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS} )) && {
	typeset -ga ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS
	ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS=(
    vi-forward-blank-word-end
    forward-word
	)
}

function __smart_completion() {
  if [ -n "$POSTDISPLAY" ]; then
    zle autosuggest-accept
  else
    zle expand-or-complete
  fi
}

zle -N __smart_completion
bindkey '\t' __smart_completion
bindkey "^l" vi-forward-blank-word-end
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line
bindkey "^[." insert-last-word



function __smart_backward() {
  if [ -n "$POSTDISPLAY" ]; then
    zle autosuggest-clear
  else
    zle backward-delete-char
  fi
}

zle -N __smart_backward
bindkey '^H' __smart_backward

# fzf
source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh

if [[ -z "$LD_LIBRARY_PATH" ]]; then
  export LD_LIBRARY_PATH=$HOME/temp
else
  export LD_LIBRARY_PATH=$HOME/temp:$LD_LIBRARY_PATH
fi 

eval "$(zoxide init zsh)"

export PYTHONPATH=$RSFSRC/book/Recipes:$HOME/.uv:$PYTHONPATH

# __________________________  git info 
# # PROMPT="%{$fg_bold[green]%}%n@%m%{$reset_color%} %{$fg_bold[blue]%}%2~%{$reset_color%} $(my_git_prompt_info)%{$reset_color%}%B»%b "
# # PROMPT=$"%{$fg_bold[blue]%}%2~%{$reset_color%} $(my_git_prompt_info)%{$reset_color%}%B\n » %b"
# # PROMPT="$(my_git_prompt_info)%{$reset_color%}%B » %b"
# autoload -U colors && colors
#
#PROMPT=" %{$fg_bold[blue]%}%0~%{$reset_color%} $(git_prompt_info)%{$reset_color%}%B» %b"
# PROMPT=" %{$fg_bold[blue]%}%0~%{$reset_color%}"
#
# RPS1="${return_code}"


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/opt/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/opt/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# <<< conda initialize <<<

## custom activate 
#  if mada venv exist , activate it 
# if conda env list | grep -q 'mada'; then
#     conda activate mada
# fi
#
## use conda manage package enviroment

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'micromamba shell init' !!
export MAMBA_EXE='/usr/bin/micromamba';
export MAMBA_ROOT_PREFIX='/home/akawcc/.local/share/mamba';
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --root-prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    alias micromamba="$MAMBA_EXE"  # Fallback on help from micromamba activate
fi
unset __mamba_setup
# <<< mamba initialize <<<

#############################################
# Codon compiler path (added by install script)
export PATH=$CONDA_PREFIX/bin:/home/akawcc/.codon/bin:$PATH
# >>> xmake >>>
test -f "/home/akawcc/.xmake/profile" && source "/home/akawcc/.xmake/profile"
# <<< xmake <<<#
# uv
export UV_DEFAULT_INDEX="https://mirrors.aliyun.com/pypi/simple"



